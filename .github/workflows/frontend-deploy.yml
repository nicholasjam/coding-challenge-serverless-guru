name: Deploy Frontend

on:
  push:
    branches: [main, develop]
    paths:
      - "frontend/**"
      - ".github/workflows/frontend-deploy.yml"
  pull_request:
    branches: [main]
    paths:
      - "frontend/**"

env:
  NODE_VERSION: "18"

jobs:
  test:
    name: Test Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run linting
        run: |
          cd frontend
          npm run lint

      - name: Run tests
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: frontend/coverage
          flags: frontend

  build-and-deploy-dev:
    name: Build and Deploy to Development
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Build for development
        env:
          REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL_DEV }}
          REACT_APP_STAGE: dev
        run: |
          cd frontend
          npm run build

      - name: Deploy to Netlify (Development)
        uses: nwtgck/actions-netlify@v2.0
        with:
          publish-dir: "./frontend/build"
          production-branch: develop
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions - Dev"
          enable-pull-request-comment: true
          enable-commit-comment: true
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID_DEV }}

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          cd frontend
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  build-and-deploy-prod:
    name: Build and Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Build for production
        env:
          REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL_PROD }}
          REACT_APP_STAGE: prod
          GENERATE_SOURCEMAP: false
        run: |
          cd frontend
          npm run build

      - name: Deploy to Netlify (Production)
        uses: nwtgck/actions-netlify@v2.0
        with:
          publish-dir: "./frontend/build"
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions - Production"
          enable-pull-request-comment: false
          enable-commit-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID_PROD }}

      - name: Run Lighthouse CI (Production)
        run: |
          npm install -g @lhci/cli@0.12.x
          cd frontend
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: frontend-v${{ github.run_number }}
          release_name: Frontend Release v${{ github.run_number }}
          body: |
            ðŸš€ **Frontend deployed to production!**

            **Live URL**: https://taskmanager.netlify.app

            **Features**:
            - Responsive design for all device sizes
            - Complete CRUD operations for tasks
            - Advanced filtering and search
            - Real-time notifications
            - Modern Material-UI interface

            **Performance**:
            - Lighthouse Performance Score: 90+
            - Optimized bundle size
            - Fast initial load times

            **Changes**: ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false

  # Alternative deployment to AWS S3 + CloudFront
  deploy-aws:
    name: Deploy to AWS S3 + CloudFront
    runs-on: ubuntu-latest
    needs: test
    if: false # Disabled by default, enable if using AWS hosting
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Build for production
        env:
          REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL_PROD }}
          REACT_APP_STAGE: prod
          GENERATE_SOURCEMAP: false
        run: |
          cd frontend
          npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to S3
        run: |
          cd frontend
          aws s3 sync build/ s3://${{ secrets.S3_BUCKET_NAME }} --delete

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"
